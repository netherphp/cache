<?php

namespace Nether\Cache;
use \Nether;

Nether\Option::Define([
	'cache-diskcache-path' => null
]);

class Diskcache extends DriverInterface {

	protected $Path;
	/*//
	@type string
	the directory path to the file cache.
	//*/

	public function __construct() {
		$this->SetPath(Nether\Option::Get('cache-diskcache-path'));
		return;
	}

	public function SetPath($path) {
	/*//
	define the path to store files in. automatically trims off any trailing
	slashes that are left on.
	//*/

		$this->Path = rtrim($path,'\\/');
		return;
	}

	////////////////
	////////////////

	public function GetFileName($key) {
	/*//
	@return string
	get the full path filename to the file that will be generated by this key
	request, adds a .cache extension to the key as well.
	//*/

		return sprintf(
			'%s%s%s.cache',
			$this->Path,
			DIRECTORY_SEPARATOR,
			$key
		);
	}

	public function IsPathValid() {
	/*//
	@return boolean
	determine if the configured path for file storage is a valid and accessable
	place to put things.
	//*/

		if(!$this->Path) {
			/*//todo/
			log this error.
			//*/
			echo "Option cache-diskcache-path not set.", PHP_EOL;
			return false;
		}

		if(!is_dir($this->Path)) {
			/*//todo/
			log this error.
			//*/

			if(!@mkdir($this->Path,0777,true)) {
				/*//todo/
				log this error.
				//*/
				echo "Unable to create {$this->Path}", PHP_EOL;
				return false;
			} else {
				return true;
			}
		}

		if(!is_writable($this->Path)) {
			/*//todo/
			log this error.
			//*/
			echo "Cache path {$this->Path} is not writable.", PHP_EOL;
			return false;
		}

		return true;
	}

	////////////////
	////////////////

	public function Drop($key) {
		if(!$this->IsPathValid()) return;

		$file = $this->GetFileName($key);
		if(file_exists($file)) {
			if(!is_writable($file)) {
				/*//todo/
				log this error.
				//*/
				echo "Unable to remove cache {$file}", PHP_EOL;
			} else {
				unlink($file);
			}
		}

		return;
	}

	public function Flush() {
		if(!$this->IsPathValid()) return;

		$list = glob($this->GetFileName('*'));
		foreach($list as $file) {
			if(!is_writable($file)) {
				/*//todo/
				log this error.
				//*/
				echo "Unable to remove cache file {$file}", PHP_EOL;
			} else {
				unlink($file);
			}
		}

		return;
	}

	public function Get($key) {
		if(!$this->IsPathValid()) return;

		$file = $this->GetFileName($key);
		if(file_exists($file)) {
			if(!is_readable($file)) {
				/*//todo/
				log this error.
				//*/
				echo "Unable to read cache file {$file}", PHP_EOL;
			} else {
				++$this->Hit;
				return unserialize(file_get_contents($file));
			}
		}

		++$this->Miss;
		return null;
	}

	public function Set($key,$value) {
		if(!$this->IsPathValid()) return;

		$file = $this->GetFileName($key);
		if(!is_writable(dirname($file))) {
			/*//todo/
			log this error.
			//*/
			echo "Unable to write cache file {$file}", PHP_EOL;
		} else {
			file_put_contents($file,serialize($value));
		}

		return;
	}

}
